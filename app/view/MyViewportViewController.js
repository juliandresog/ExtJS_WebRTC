/*
 * File: app/view/MyViewportViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.5.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.5.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Julian.view.MyViewportViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.myviewport',

    onBtnStartClick: function(button, e, eOpts) {
        var that = this;

        button.setDisabled(true);
        //that.getView().down('#btnStop').setDisabled(false);

        this.captureCamera(function(camera) {

            that.video.muted = true;
            that.video.volume = 0;
            that.video.srcObject = camera;

            that.recorder = RecordRTC(camera, {
                type: 'video'
            });

            that.recorder.startRecording();
            // release camera on stopRecording
            that.recorder.camera = camera;

            //document.getElementById('btn-stop-recording').disabled = false;
            that.getView().down('#btnStop').setDisabled(false);

        });
    },

    onBtnStopClick: function(button, e, eOpts) {
        button.setDisabled(true);
        this.recorder.stopRecording(this.stopRecordingCallback);
    },

    onViewportRender: function(component, eOpts) {
        var that = this;
        this.video = document.querySelector('video');

        this.captureCamera = function captureCamera(callback) {

            navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(function(camera) {

            callback(camera);

        }).catch(function(error) {

            alert('Unable to capture your camera. Please check console logs.');
            console.error(error);

        });

    };

    this.stopRecordingCallback = function stopRecordingCallback() {

        that.video.src = that.video.srcObject = null;
        that.video.muted = false;
        that.video.volume = 1;
        that.video.src = URL.createObjectURL(that.recorder.getBlob());


        that.recorder.camera.stop();
        that.recorder.destroy();
        that.recorder = null;

    };

    this.recorder = null; // globally accessible
    }

});
